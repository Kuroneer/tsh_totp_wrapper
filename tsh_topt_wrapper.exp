#!/usr/bin/expect -f

# ENV VARS:
#  TSHWRAPPER_SECRET_PATH: Path to the secret file
#  TSHWRAPPER_TSH_PATH: Path to tsh runnable
#  TSHWRAPPER_CYPHER: Cypher to use to read the secret file
#  TSHWRAPPER_OPENSSL_MD: Message digestion algorithm to generate key from password
#  TSHWRAPPER_OPENSSL_OPTION: Message digestion algorithm option
#  TSHWRAPPER_SILENT: If this script should report to the user
#  TSHWRAPPER_IGNORE_FIRST_LINES: Regex to ignore lines before tsh starts


# Vars defaults
if [info exists env(USER)] {
    set secret_path /home/$env(USER)/.tsh_otp_secret.aes
} else {
    set secret_path .tsh_otp_secret.aes;
}
set tsh_path tsh
set cypher aes-256-cbc;
set openssl_md_option -md
set openssl_md sha256
set silent 0

set env(DISPLAY) ""

# Check env vars for overrides
if [info exists env(TSHWRAPPER_SECRET_PATH)] {
    set secret_path $env(TSHWRAPPER_SECRET_PATH);
}
if [info exists env(TSHWRAPPER_TSH_PATH)] {
    set tsh_path $env(TSHWRAPPER_TSH_PATH);
}
if [info exists env(TSHWRAPPER_CYPHER)] {
    set cypher $env(TSHWRAPPER_CYPHER);
}
if [info exists env(TSHWRAPPER_OPENSSL_MD_OPTION)] {
    set openssl_md_option $env(TSHWRAPPER_OPENSSL_MD_OPTION);
}
if [info exists env(TSHWRAPPER_OPENSSL_MD)] {
    set openssl_md $env(TSHWRAPPER_OPENSSL_MD);
}
if [info exists env(TSHWRAPPER_SILENT)] {
    set silent $env(TSHWRAPPER_SILENT);
}
##############################

proc ask_pass { { prompt 0 } } {
    stty -echo;
    report "<Reading the password>\n";
    if { $prompt } {
        report "Input the password:\n" 1;
    }
    expect_user -re "(.*)\n";
    report "<Captured the password>\n";
    set pass $expect_out(1,string);
    stty echo ;

    if { $pass eq "" } {
        report "<The password is empty, bye!>\n";
        exit;
    }

    return $pass
}

proc report { message { override_silent 0 } } {
    global silent;
    if {$override_silent || !$silent} {
        send_user $message;
    }
}

proc extract_from_uri { uri key } {
    set success [regexp "otpauth:.*$key=\(\[^&\]*\)" $uri _unused match];
    if { $success } {
        return $match;
    } else {
        return "";
    }
}

proc base32_bindecode { base32_string } {
    set chan [open "|base32 -d" r+];
    fconfigure $chan -translation binary -encoding binary;
    puts -nonewline $chan $base32_string;
    flush $chan;
    chan close $chan write;
    set binary_data [read $chan];
    close $chan;
    return $binary_data;
}

proc get_otp { secret period digits } {
    # Decode secret in base32 to hex
    binary scan [base32_bindecode $secret] H* hex_secret;

    # Get time offset as binary
    set now_binary [binary format W [expr [clock seconds] / $period]];

    # Have openssl calculate the mac
    set chan [open "|openssl dgst -sha1 -mac HMAC -macopt hexkey:$hex_secret" r+];
    fconfigure $chan -translation binary -encoding binary;
    puts -nonewline $chan $now_binary;
    flush $chan;
    chan close $chan write;
    regexp {^.*= ([0-9a-z]*)} [read $chan] _unused mac;
    close $chan;

    # Get last 4 bits of mac as offset
    scan [string index $mac end] %x byte_offset;

    # Dynamic truncate and turn into number (need to set the first bit to 0
    scan [string range $mac [expr $byte_offset * 2] [expr $byte_offset * 2 + 7]] %x dec_mac_truncated;
    set dec_mac_truncated [expr $dec_mac_truncated & 0x7FFFFFFF];
    set otp [string range [format "%0*d" $digits $dec_mac_truncated] [expr [string length $dec_mac_truncated] - $digits] end];
    return $otp;
}

proc open_otp { pass { times 0 } } {
    global secret_path
    global cypher
    global openssl_md_option
    global openssl_md

    if { [file exists $secret_path] } {
        log_user 0;
        spawn -noecho openssl $cypher -d -in $secret_path $openssl_md_option $openssl_md;
        expect {
            "^enter $cypher decryption password:" {
                report "<Using the captured password to open $secret_path>\n";
                send "$pass\r";
                exp_continue;
            }
            eof {
                set info $expect_out(buffer);
                report "<Captured the secret>\n";
            }
        }
        lassign [wait] _pid _spawnid os_error_flag exit_code
        if { $os_error_flag || $exit_code} {
            if { $times > 0 } {
                report "<The secret was badly decrypted, check $> openssl $cypher -d -in $secret_path $openssl_md_option $openssl_md, bye!>\n" 1;
                exit;
            } else {
                report "Unlocking OTP code...\n" 1;
                set pass [ask_pass 1]
                return [open_otp $pass 1];
            }
        }

        set info [string trimright $info \r\n];
        set info [string trimleft $info \r\n];
        set digits [extract_from_uri $info "digits"];
        if { $digits eq "" } {
            set digits 6;
        }
        set period [extract_from_uri $info "period"];
        if { $period eq "" } {
            set period 30;
        }
        set secret [extract_from_uri $info "secret"];
        if { $secret eq "" } {
            report "<Using whole $secret_path as secret>\n";
            set secret $info;
        }

        if { $secret eq "" } {
            report "<The secret is empty, check $secret_path and password, bye!>\n" 1;
            exit;
        }
        set otp [get_otp $secret $period $digits];
        log_user 1;

        return "$otp"
    }
}

report "<TSH TOTP Wrapper for $tsh_path>\n";

set arguments [lrange $argv 0 end];

set interactive_stdin [dict exists [fconfigure stdin] -mode]
if (!$interactive_stdin) {
    overlay $tsh_path {*}$arguments
    exit
}

set timeout 60
spawn -noecho $tsh_path {*}$arguments
set tsh_id $spawn_id;
set tsh_pty $spawn_out(slave,name)

if [info exists env(TSHWRAPPER_IGNORE_FIRST_LINES)] {
    expect_before -i $tsh_id -re "$env(TSHWRAPPER_IGNORE_FIRST_LINES)" exp_continue;
}

expect {
    -i $tsh_id -re "^Enter password for Teleport user .*:" {
        # Version 2.x

        set pass [ask_pass]
        set otp [open_otp $pass];

        log_user 0;
        send -i $tsh_id "$pass\r";
        unset pass
        log_user 1;

        expect -i $tsh_id "Enter your OTP token:";
        if { $otp eq "" } {
            report "<Reading the OTP token>\n";
            expect_user -re "(.*)\n";
            report "<Captured the OTP token>\n";
            set otp $expect_out(1,string);
        }
        send -i $tsh_id "$otp\r";
        expect -i $tsh_id "$otp\r";

        # Workaround to try to handle bad line wrappping
        set YZ [stty columns];
        set XZ [stty rows   ];
        set XZ2 [expr $XZ +1];
        stty rows $XZ2 columns $YZ < $tsh_pty; # Does not work 100% percent of times, but nearly enough
        # End of workaround
    }
    -i $tsh_id "^If browser window does not open automatically, open it by clicking on the link:" {
        # Version 3.x

        # Careful, if --user is in the parameters, you get prompted to log in
        # again

        report "<URL incoming...>\n";
        expect -i $tsh_id -re " (http://\[^\[:space:\]\]+)"
        set localurl $expect_out(1,string);

        if {! [info exists localurl]} {
            report "<Cannot find local url>\n" 1;
            exit;
        }
        report "<Local url is $localurl>\n";


        log_user 0;
        spawn -noecho curl -I $localurl;
        expect {
            -re "Location: (\[^\[:space:\]\]+)" {
                set login_page $expect_out(1,string)
                exp_continue;
            }
            eof
        }
        wait
        log_user 1;

        if {! [info exists login_page]} {
            report "<Cannot find login page>\n" 1;
            exit;
        }
        report "<Login page is $login_page>\n";


        log_user 0;
        set cookies {}
        spawn -noecho curl -i $login_page;
        expect {
            -re ".*kc-form-login.*action=\"(\[^\[:space:\]\]+)\".*" {
                set action $expect_out(1,string)
                regsub -all "&amp;" "$action" "\\&" action
                exp_continue;
            }
            -re "Set-Cookie: (\[^\[:space:\];\]+)" {
                lappend cookies "-H"
                lappend cookies "Cookie: $expect_out(1,string)"
                exp_continue;
            }
            eof
        }
        wait
        log_user 1;

        if {! [info exists action]} {
            report "<Cannot find pass action>\n" 1;
            exit;
        }
        report "<Pass action is $action>\n";


        set pass [ask_pass 1]


        log_user 0;
        spawn -noecho curl -i -s $action {*}$cookies --data-urlencode "username=$env(USER)" --data-urlencode password@-
        send "$pass";
        unset action
        send [format "%c%c%c" 4 4 4]
        expect {
            -re ".*kc-totp-login-form.*action=\"(\[^\[:space:\]\]+)\".*" {
                set action $expect_out(1,string)
                regsub -all "&amp;" "$action" "\\&" action
                exp_continue;
            }
            eof
        }
        wait
        log_user 1;

        if {! [info exists action]} {
            report "<Cannot find OTP action, password was correct?>\n" 1;
            exit;
        }
        report "<OTP action is $action>\n";


        set otp [open_otp $pass];
        unset pass
        if { $otp eq "" } {
            report "Input the totp:\n" 1;
            expect_user -re "(.*)\n";
            set otp "$expect_out(1,string)"
        }


        log_user 0;
        spawn -noecho curl -i -s $action {*}$cookies --data-urlencode "totp=$otp"
        expect {
            -re "Location: (\[^\[:space:\]\]+)" {
                set location $expect_out(1,string)
                exp_continue;
            }
            -re "Set-Cookie: (\[^\[:space:\];\]+)" {
                lappend cookies "-H"
                lappend cookies "Cookie: $expect_out(1,string)"
                exp_continue;
            }
            eof
        }
        wait
        log_user 1;

        if {! [info exists location]} {
            report "<Cannot find logged-in location, OTP was correct?>\n" 1;
            exit;
        }
        report "<Logged-in page is $location>\n";


        log_user 0;
        spawn -noecho curl -i -s $location {*}$cookies
        match_max -i $spawn_id 65500
        expect {
            -re "<a href=\"(\[^\[:space:\]\]+)\">Found</a>" {
                set callback $expect_out(1,string)
                regsub -all "&amp;" "$callback" "\\&" callback
                exp_continue;
            }
            -re "Set-Cookie: (\[^\[:space:\];\]+)" {
                lappend cookies "-H"
                lappend cookies "Cookie: $expect_out(1,string)"
                exp_continue;
            }
            eof
        }
        wait
        log_user 1;

        if {! [info exists callback]} {
            report "<Cannot find callback>\n" 1;
            exit;
        }
        report "<Callback is $callback>\n";


        log_user 0;
        spawn -noecho curl -i -s "$callback" {*}$cookies
        expect {
            -re "login_success" {
                set success 1
            }
            eof
        }
        wait
        log_user 1;

        if {! [info exists success]} {
            report "<Something went wrong, sorry>\n" 1;
            exit;
        }
        report "<Finished login>\n";

    }
    -i $tsh_id -re ".";
}
report "<Passthrough mode...>\n";

# Propagate window size changes to tsh
trap {
    set XZ [stty rows   ];
    set YZ [stty columns];
    stty rows $XZ columns $YZ < $tsh_pty;
} WINCH

interact -i $tsh_id -o $tsh_id

